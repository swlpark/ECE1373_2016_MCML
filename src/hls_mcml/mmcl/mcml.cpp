#include "mcml.h"
#define MAX_LCF 2147483647

float arcos[1024];
float cosin[1024];
void init_arccos()
{
	arcos[0] = 3.14159;
	arcos[1] = 3.07908;
	arcos[2] = 3.05318;
	arcos[3] = 3.03329;
	arcos[4] = 3.01651;
	arcos[5] = 3.00172;
	arcos[6] = 2.98835;
	arcos[7] = 2.97604;
	arcos[8] = 2.96459;
	arcos[9] = 2.95382;
	arcos[10] = 2.94363;
	arcos[11] = 2.93393;
	arcos[12] = 2.92466;
	arcos[13] = 2.91577;
	arcos[14] = 2.9072;
	arcos[15] = 2.89894;
	arcos[16] = 2.89094;
	arcos[17] = 2.88318;
	arcos[18] = 2.87564;
	arcos[19] = 2.86831;
	arcos[20] = 2.86117;
	arcos[21] = 2.85419;
	arcos[22] = 2.84738;
	arcos[23] = 2.84072;
	arcos[24] = 2.8342;
	arcos[25] = 2.82781;
	arcos[26] = 2.82154;
	arcos[27] = 2.81539;
	arcos[28] = 2.80935;
	arcos[29] = 2.80341;
	arcos[30] = 2.79757;
	arcos[31] = 2.79183;
	arcos[32] = 2.78617;
	arcos[33] = 2.7806;
	arcos[34] = 2.77511;
	arcos[35] = 2.7697;
	arcos[36] = 2.76436;
	arcos[37] = 2.75909;
	arcos[38] = 2.75389;
	arcos[39] = 2.74876;
	arcos[40] = 2.74369;
	arcos[41] = 2.73868;
	arcos[42] = 2.73373;
	arcos[43] = 2.72883;
	arcos[44] = 2.72399;
	arcos[45] = 2.7192;
	arcos[46] = 2.71446;
	arcos[47] = 2.70977;
	arcos[48] = 2.70512;
	arcos[49] = 2.70053;
	arcos[50] = 2.69597;
	arcos[51] = 2.69146;
	arcos[52] = 2.68699;
	arcos[53] = 2.68257;
	arcos[54] = 2.67818;
	arcos[55] = 2.67383;
	arcos[56] = 2.66951;
	arcos[57] = 2.66524;
	arcos[58] = 2.661;
	arcos[59] = 2.65679;
	arcos[60] = 2.65261;
	arcos[61] = 2.64847;
	arcos[62] = 2.64436;
	arcos[63] = 2.64028;
	arcos[64] = 2.63623;
	arcos[65] = 2.63221;
	arcos[66] = 2.62822;
	arcos[67] = 2.62426;
	arcos[68] = 2.62032;
	arcos[69] = 2.61641;
	arcos[70] = 2.61253;
	arcos[71] = 2.60867;
	arcos[72] = 2.60484;
	arcos[73] = 2.60104;
	arcos[74] = 2.59725;
	arcos[75] = 2.59349;
	arcos[76] = 2.58975;
	arcos[77] = 2.58604;
	arcos[78] = 2.58235;
	arcos[79] = 2.57868;
	arcos[80] = 2.57503;
	arcos[81] = 2.5714;
	arcos[82] = 2.56779;
	arcos[83] = 2.5642;
	arcos[84] = 2.56064;
	arcos[85] = 2.55709;
	arcos[86] = 2.55356;
	arcos[87] = 2.55004;
	arcos[88] = 2.54655;
	arcos[89] = 2.54308;
	arcos[90] = 2.53962;
	arcos[91] = 2.53618;
	arcos[92] = 2.53275;
	arcos[93] = 2.52935;
	arcos[94] = 2.52596;
	arcos[95] = 2.52258;
	arcos[96] = 2.51922;
	arcos[97] = 2.51588;
	arcos[98] = 2.51255;
	arcos[99] = 2.50924;
	arcos[100] = 2.50595;
	arcos[101] = 2.50266;
	arcos[102] = 2.49939;
	arcos[103] = 2.49614;
	arcos[104] = 2.4929;
	arcos[105] = 2.48968;
	arcos[106] = 2.48646;
	arcos[107] = 2.48326;
	arcos[108] = 2.48008;
	arcos[109] = 2.4769;
	arcos[110] = 2.47374;
	arcos[111] = 2.4706;
	arcos[112] = 2.46746;
	arcos[113] = 2.46434;
	arcos[114] = 2.46123;
	arcos[115] = 2.45813;
	arcos[116] = 2.45504;
	arcos[117] = 2.45197;
	arcos[118] = 2.4489;
	arcos[119] = 2.44585;
	arcos[120] = 2.44281;
	arcos[121] = 2.43978;
	arcos[122] = 2.43676;
	arcos[123] = 2.43375;
	arcos[124] = 2.43075;
	arcos[125] = 2.42776;
	arcos[126] = 2.42478;
	arcos[127] = 2.42182;
	arcos[128] = 2.41886;
	arcos[129] = 2.41591;
	arcos[130] = 2.41297;
	arcos[131] = 2.41004;
	arcos[132] = 2.40712;
	arcos[133] = 2.40422;
	arcos[134] = 2.40131;
	arcos[135] = 2.39842;
	arcos[136] = 2.39554;
	arcos[137] = 2.39267;
	arcos[138] = 2.3898;
	arcos[139] = 2.38695;
	arcos[140] = 2.3841;
	arcos[141] = 2.38126;
	arcos[142] = 2.37843;
	arcos[143] = 2.37561;
	arcos[144] = 2.3728;
	arcos[145] = 2.36999;
	arcos[146] = 2.3672;
	arcos[147] = 2.36441;
	arcos[148] = 2.36163;
	arcos[149] = 2.35885;
	arcos[150] = 2.35609;
	arcos[151] = 2.35333;
	arcos[152] = 2.35058;
	arcos[153] = 2.34784;
	arcos[154] = 2.3451;
	arcos[155] = 2.34237;
	arcos[156] = 2.33965;
	arcos[157] = 2.33694;
	arcos[158] = 2.33423;
	arcos[159] = 2.33153;
	arcos[160] = 2.32884;
	arcos[161] = 2.32615;
	arcos[162] = 2.32347;
	arcos[163] = 2.3208;
	arcos[164] = 2.31813;
	arcos[165] = 2.31547;
	arcos[166] = 2.31282;
	arcos[167] = 2.31017;
	arcos[168] = 2.30753;
	arcos[169] = 2.3049;
	arcos[170] = 2.30227;
	arcos[171] = 2.29965;
	arcos[172] = 2.29704;
	arcos[173] = 2.29443;
	arcos[174] = 2.29182;
	arcos[175] = 2.28923;
	arcos[176] = 2.28663;
	arcos[177] = 2.28405;
	arcos[178] = 2.28147;
	arcos[179] = 2.27889;
	arcos[180] = 2.27633;
	arcos[181] = 2.27376;
	arcos[182] = 2.27121;
	arcos[183] = 2.26865;
	arcos[184] = 2.26611;
	arcos[185] = 2.26357;
	arcos[186] = 2.26103;
	arcos[187] = 2.2585;
	arcos[188] = 2.25598;
	arcos[189] = 2.25346;
	arcos[190] = 2.25094;
	arcos[191] = 2.24843;
	arcos[192] = 2.24593;
	arcos[193] = 2.24343;
	arcos[194] = 2.24093;
	arcos[195] = 2.23844;
	arcos[196] = 2.23596;
	arcos[197] = 2.23348;
	arcos[198] = 2.231;
	arcos[199] = 2.22853;
	arcos[200] = 2.22607;
	arcos[201] = 2.22361;
	arcos[202] = 2.22115;
	arcos[203] = 2.2187;
	arcos[204] = 2.21625;
	arcos[205] = 2.21381;
	arcos[206] = 2.21137;
	arcos[207] = 2.20894;
	arcos[208] = 2.20651;
	arcos[209] = 2.20408;
	arcos[210] = 2.20166;
	arcos[211] = 2.19925;
	arcos[212] = 2.19683;
	arcos[213] = 2.19442;
	arcos[214] = 2.19202;
	arcos[215] = 2.18962;
	arcos[216] = 2.18723;
	arcos[217] = 2.18483;
	arcos[218] = 2.18245;
	arcos[219] = 2.18006;
	arcos[220] = 2.17768;
	arcos[221] = 2.17531;
	arcos[222] = 2.17294;
	arcos[223] = 2.17057;
	arcos[224] = 2.1682;
	arcos[225] = 2.16584;
	arcos[226] = 2.16349;
	arcos[227] = 2.16113;
	arcos[228] = 2.15878;
	arcos[229] = 2.15644;
	arcos[230] = 2.1541;
	arcos[231] = 2.15176;
	arcos[232] = 2.14942;
	arcos[233] = 2.14709;
	arcos[234] = 2.14476;
	arcos[235] = 2.14244;
	arcos[236] = 2.14012;
	arcos[237] = 2.1378;
	arcos[238] = 2.13549;
	arcos[239] = 2.13318;
	arcos[240] = 2.13087;
	arcos[241] = 2.12857;
	arcos[242] = 2.12627;
	arcos[243] = 2.12397;
	arcos[244] = 2.12168;
	arcos[245] = 2.11939;
	arcos[246] = 2.1171;
	arcos[247] = 2.11481;
	arcos[248] = 2.11253;
	arcos[249] = 2.11026;
	arcos[250] = 2.10798;
	arcos[251] = 2.10571;
	arcos[252] = 2.10344;
	arcos[253] = 2.10117;
	arcos[254] = 2.09891;
	arcos[255] = 2.09665;
	arcos[256] = 2.0944;
	arcos[257] = 2.09214;
	arcos[258] = 2.08989;
	arcos[259] = 2.08764;
	arcos[260] = 2.0854;
	arcos[261] = 2.08315;
	arcos[262] = 2.08092;
	arcos[263] = 2.07868;
	arcos[264] = 2.07644;
	arcos[265] = 2.07421;
	arcos[266] = 2.07199;
	arcos[267] = 2.06976;
	arcos[268] = 2.06754;
	arcos[269] = 2.06532;
	arcos[270] = 2.0631;
	arcos[271] = 2.06088;
	arcos[272] = 2.05867;
	arcos[273] = 2.05646;
	arcos[274] = 2.05425;
	arcos[275] = 2.05205;
	arcos[276] = 2.04985;
	arcos[277] = 2.04765;
	arcos[278] = 2.04545;
	arcos[279] = 2.04326;
	arcos[280] = 2.04106;
	arcos[281] = 2.03887;
	arcos[282] = 2.03669;
	arcos[283] = 2.0345;
	arcos[284] = 2.03232;
	arcos[285] = 2.03014;
	arcos[286] = 2.02796;
	arcos[287] = 2.02579;
	arcos[288] = 2.02361;
	arcos[289] = 2.02144;
	arcos[290] = 2.01927;
	arcos[291] = 2.01711;
	arcos[292] = 2.01494;
	arcos[293] = 2.01278;
	arcos[294] = 2.01062;
	arcos[295] = 2.00846;
	arcos[296] = 2.00631;
	arcos[297] = 2.00416;
	arcos[298] = 2.002;
	arcos[299] = 1.99986;
	arcos[300] = 1.99771;
	arcos[301] = 1.99556;
	arcos[302] = 1.99342;
	arcos[303] = 1.99128;
	arcos[304] = 1.98914;
	arcos[305] = 1.98701;
	arcos[306] = 1.98487;
	arcos[307] = 1.98274;
	arcos[308] = 1.98061;
	arcos[309] = 1.97848;
	arcos[310] = 1.97635;
	arcos[311] = 1.97423;
	arcos[312] = 1.97211;
	arcos[313] = 1.96999;
	arcos[314] = 1.96787;
	arcos[315] = 1.96575;
	arcos[316] = 1.96364;
	arcos[317] = 1.96152;
	arcos[318] = 1.95941;
	arcos[319] = 1.9573;
	arcos[320] = 1.95519;
	arcos[321] = 1.95309;
	arcos[322] = 1.95098;
	arcos[323] = 1.94888;
	arcos[324] = 1.94678;
	arcos[325] = 1.94468;
	arcos[326] = 1.94258;
	arcos[327] = 1.94049;
	arcos[328] = 1.93839;
	arcos[329] = 1.9363;
	arcos[330] = 1.93421;
	arcos[331] = 1.93212;
	arcos[332] = 1.93004;
	arcos[333] = 1.92795;
	arcos[334] = 1.92587;
	arcos[335] = 1.92378;
	arcos[336] = 1.9217;
	arcos[337] = 1.91962;
	arcos[338] = 1.91755;
	arcos[339] = 1.91547;
	arcos[340] = 1.9134;
	arcos[341] = 1.91132;
	arcos[342] = 1.90925;
	arcos[343] = 1.90718;
	arcos[344] = 1.90511;
	arcos[345] = 1.90305;
	arcos[346] = 1.90098;
	arcos[347] = 1.89892;
	arcos[348] = 1.89686;
	arcos[349] = 1.89479;
	arcos[350] = 1.89274;
	arcos[351] = 1.89068;
	arcos[352] = 1.88862;
	arcos[353] = 1.88656;
	arcos[354] = 1.88451;
	arcos[355] = 1.88246;
	arcos[356] = 1.88041;
	arcos[357] = 1.87836;
	arcos[358] = 1.87631;
	arcos[359] = 1.87426;
	arcos[360] = 1.87221;
	arcos[361] = 1.87017;
	arcos[362] = 1.86813;
	arcos[363] = 1.86608;
	arcos[364] = 1.86404;
	arcos[365] = 1.862;
	arcos[366] = 1.85997;
	arcos[367] = 1.85793;
	arcos[368] = 1.85589;
	arcos[369] = 1.85386;
	arcos[370] = 1.85182;
	arcos[371] = 1.84979;
	arcos[372] = 1.84776;
	arcos[373] = 1.84573;
	arcos[374] = 1.8437;
	arcos[375] = 1.84167;
	arcos[376] = 1.83965;
	arcos[377] = 1.83762;
	arcos[378] = 1.8356;
	arcos[379] = 1.83358;
	arcos[380] = 1.83155;
	arcos[381] = 1.82953;
	arcos[382] = 1.82751;
	arcos[383] = 1.82549;
	arcos[384] = 1.82348;
	arcos[385] = 1.82146;
	arcos[386] = 1.81944;
	arcos[387] = 1.81743;
	arcos[388] = 1.81542;
	arcos[389] = 1.8134;
	arcos[390] = 1.81139;
	arcos[391] = 1.80938;
	arcos[392] = 1.80737;
	arcos[393] = 1.80536;
	arcos[394] = 1.80336;
	arcos[395] = 1.80135;
	arcos[396] = 1.79934;
	arcos[397] = 1.79734;
	arcos[398] = 1.79533;
	arcos[399] = 1.79333;
	arcos[400] = 1.79133;
	arcos[401] = 1.78933;
	arcos[402] = 1.78733;
	arcos[403] = 1.78533;
	arcos[404] = 1.78333;
	arcos[405] = 1.78133;
	arcos[406] = 1.77934;
	arcos[407] = 1.77734;
	arcos[408] = 1.77534;
	arcos[409] = 1.77335;
	arcos[410] = 1.77136;
	arcos[411] = 1.76936;
	arcos[412] = 1.76737;
	arcos[413] = 1.76538;
	arcos[414] = 1.76339;
	arcos[415] = 1.7614;
	arcos[416] = 1.75941;
	arcos[417] = 1.75742;
	arcos[418] = 1.75544;
	arcos[419] = 1.75345;
	arcos[420] = 1.75147;
	arcos[421] = 1.74948;
	arcos[422] = 1.7475;
	arcos[423] = 1.74551;
	arcos[424] = 1.74353;
	arcos[425] = 1.74155;
	arcos[426] = 1.73957;
	arcos[427] = 1.73758;
	arcos[428] = 1.7356;
	arcos[429] = 1.73362;
	arcos[430] = 1.73165;
	arcos[431] = 1.72967;
	arcos[432] = 1.72769;
	arcos[433] = 1.72571;
	arcos[434] = 1.72374;
	arcos[435] = 1.72176;
	arcos[436] = 1.71978;
	arcos[437] = 1.71781;
	arcos[438] = 1.71584;
	arcos[439] = 1.71386;
	arcos[440] = 1.71189;
	arcos[441] = 1.70992;
	arcos[442] = 1.70794;
	arcos[443] = 1.70597;
	arcos[444] = 1.704;
	arcos[445] = 1.70203;
	arcos[446] = 1.70006;
	arcos[447] = 1.69809;
	arcos[448] = 1.69612;
	arcos[449] = 1.69416;
	arcos[450] = 1.69219;
	arcos[451] = 1.69022;
	arcos[452] = 1.68825;
	arcos[453] = 1.68629;
	arcos[454] = 1.68432;
	arcos[455] = 1.68236;
	arcos[456] = 1.68039;
	arcos[457] = 1.67843;
	arcos[458] = 1.67646;
	arcos[459] = 1.6745;
	arcos[460] = 1.67253;
	arcos[461] = 1.67057;
	arcos[462] = 1.66861;
	arcos[463] = 1.66665;
	arcos[464] = 1.66468;
	arcos[465] = 1.66272;
	arcos[466] = 1.66076;
	arcos[467] = 1.6588;
	arcos[468] = 1.65684;
	arcos[469] = 1.65488;
	arcos[470] = 1.65292;
	arcos[471] = 1.65096;
	arcos[472] = 1.649;
	arcos[473] = 1.64704;
	arcos[474] = 1.64508;
	arcos[475] = 1.64313;
	arcos[476] = 1.64117;
	arcos[477] = 1.63921;
	arcos[478] = 1.63725;
	arcos[479] = 1.63529;
	arcos[480] = 1.63334;
	arcos[481] = 1.63138;
	arcos[482] = 1.62942;
	arcos[483] = 1.62747;
	arcos[484] = 1.62551;
	arcos[485] = 1.62356;
	arcos[486] = 1.6216;
	arcos[487] = 1.61964;
	arcos[488] = 1.61769;
	arcos[489] = 1.61573;
	arcos[490] = 1.61378;
	arcos[491] = 1.61182;
	arcos[492] = 1.60987;
	arcos[493] = 1.60791;
	arcos[494] = 1.60596;
	arcos[495] = 1.60401;
	arcos[496] = 1.60205;
	arcos[497] = 1.6001;
	arcos[498] = 1.59814;
	arcos[499] = 1.59619;
	arcos[500] = 1.59424;
	arcos[501] = 1.59228;
	arcos[502] = 1.59033;
	arcos[503] = 1.58838;
	arcos[504] = 1.58642;
	arcos[505] = 1.58447;
	arcos[506] = 1.58252;
	arcos[507] = 1.58056;
	arcos[508] = 1.57861;
	arcos[509] = 1.57666;
	arcos[510] = 1.5747;
	arcos[511] = 1.57275;
	arcos[512] = 1.5708;
	arcos[513] = 1.56884;
	arcos[514] = 1.56689;
	arcos[515] = 1.56494;
	arcos[516] = 1.56298;
	arcos[517] = 1.56103;
	arcos[518] = 1.55908;
	arcos[519] = 1.55712;
	arcos[520] = 1.55517;
	arcos[521] = 1.55322;
	arcos[522] = 1.55126;
	arcos[523] = 1.54931;
	arcos[524] = 1.54736;
	arcos[525] = 1.5454;
	arcos[526] = 1.54345;
	arcos[527] = 1.5415;
	arcos[528] = 1.53954;
	arcos[529] = 1.53759;
	arcos[530] = 1.53563;
	arcos[531] = 1.53368;
	arcos[532] = 1.53172;
	arcos[533] = 1.52977;
	arcos[534] = 1.52781;
	arcos[535] = 1.52586;
	arcos[536] = 1.5239;
	arcos[537] = 1.52195;
	arcos[538] = 1.51999;
	arcos[539] = 1.51804;
	arcos[540] = 1.51608;
	arcos[541] = 1.51413;
	arcos[542] = 1.51217;
	arcos[543] = 1.51021;
	arcos[544] = 1.50826;
	arcos[545] = 1.5063;
	arcos[546] = 1.50434;
	arcos[547] = 1.50238;
	arcos[548] = 1.50043;
	arcos[549] = 1.49847;
	arcos[550] = 1.49651;
	arcos[551] = 1.49455;
	arcos[552] = 1.49259;
	arcos[553] = 1.49063;
	arcos[554] = 1.48867;
	arcos[555] = 1.48671;
	arcos[556] = 1.48475;
	arcos[557] = 1.48279;
	arcos[558] = 1.48083;
	arcos[559] = 1.47887;
	arcos[560] = 1.47691;
	arcos[561] = 1.47495;
	arcos[562] = 1.47298;
	arcos[563] = 1.47102;
	arcos[564] = 1.46906;
	arcos[565] = 1.46709;
	arcos[566] = 1.46513;
	arcos[567] = 1.46317;
	arcos[568] = 1.4612;
	arcos[569] = 1.45924;
	arcos[570] = 1.45727;
	arcos[571] = 1.45531;
	arcos[572] = 1.45334;
	arcos[573] = 1.45137;
	arcos[574] = 1.4494;
	arcos[575] = 1.44744;
	arcos[576] = 1.44547;
	arcos[577] = 1.4435;
	arcos[578] = 1.44153;
	arcos[579] = 1.43956;
	arcos[580] = 1.43759;
	arcos[581] = 1.43562;
	arcos[582] = 1.43365;
	arcos[583] = 1.43168;
	arcos[584] = 1.4297;
	arcos[585] = 1.42773;
	arcos[586] = 1.42576;
	arcos[587] = 1.42378;
	arcos[588] = 1.42181;
	arcos[589] = 1.41983;
	arcos[590] = 1.41786;
	arcos[591] = 1.41588;
	arcos[592] = 1.4139;
	arcos[593] = 1.41193;
	arcos[594] = 1.40995;
	arcos[595] = 1.40797;
	arcos[596] = 1.40599;
	arcos[597] = 1.40401;
	arcos[598] = 1.40203;
	arcos[599] = 1.40005;
	arcos[600] = 1.39806;
	arcos[601] = 1.39608;
	arcos[602] = 1.3941;
	arcos[603] = 1.39211;
	arcos[604] = 1.39013;
	arcos[605] = 1.38814;
	arcos[606] = 1.38616;
	arcos[607] = 1.38417;
	arcos[608] = 1.38218;
	arcos[609] = 1.38019;
	arcos[610] = 1.3782;
	arcos[611] = 1.37621;
	arcos[612] = 1.37422;
	arcos[613] = 1.37223;
	arcos[614] = 1.37024;
	arcos[615] = 1.36824;
	arcos[616] = 1.36625;
	arcos[617] = 1.36425;
	arcos[618] = 1.36226;
	arcos[619] = 1.36026;
	arcos[620] = 1.35826;
	arcos[621] = 1.35626;
	arcos[622] = 1.35426;
	arcos[623] = 1.35226;
	arcos[624] = 1.35026;
	arcos[625] = 1.34826;
	arcos[626] = 1.34626;
	arcos[627] = 1.34425;
	arcos[628] = 1.34225;
	arcos[629] = 1.34024;
	arcos[630] = 1.33824;
	arcos[631] = 1.33623;
	arcos[632] = 1.33422;
	arcos[633] = 1.33221;
	arcos[634] = 1.3302;
	arcos[635] = 1.32819;
	arcos[636] = 1.32618;
	arcos[637] = 1.32416;
	arcos[638] = 1.32215;
	arcos[639] = 1.32013;
	arcos[640] = 1.31812;
	arcos[641] = 1.3161;
	arcos[642] = 1.31408;
	arcos[643] = 1.31206;
	arcos[644] = 1.31004;
	arcos[645] = 1.30802;
	arcos[646] = 1.30599;
	arcos[647] = 1.30397;
	arcos[648] = 1.30194;
	arcos[649] = 1.29992;
	arcos[650] = 1.29789;
	arcos[651] = 1.29586;
	arcos[652] = 1.29383;
	arcos[653] = 1.2918;
	arcos[654] = 1.28977;
	arcos[655] = 1.28773;
	arcos[656] = 1.2857;
	arcos[657] = 1.28366;
	arcos[658] = 1.28163;
	arcos[659] = 1.27959;
	arcos[660] = 1.27755;
	arcos[661] = 1.27551;
	arcos[662] = 1.27347;
	arcos[663] = 1.27142;
	arcos[664] = 1.26938;
	arcos[665] = 1.26733;
	arcos[666] = 1.26528;
	arcos[667] = 1.26324;
	arcos[668] = 1.26119;
	arcos[669] = 1.25913;
	arcos[670] = 1.25708;
	arcos[671] = 1.25503;
	arcos[672] = 1.25297;
	arcos[673] = 1.25092;
	arcos[674] = 1.24886;
	arcos[675] = 1.2468;
	arcos[676] = 1.24474;
	arcos[677] = 1.24267;
	arcos[678] = 1.24061;
	arcos[679] = 1.23855;
	arcos[680] = 1.23648;
	arcos[681] = 1.23441;
	arcos[682] = 1.23234;
	arcos[683] = 1.23027;
	arcos[684] = 1.2282;
	arcos[685] = 1.22612;
	arcos[686] = 1.22405;
	arcos[687] = 1.22197;
	arcos[688] = 1.21989;
	arcos[689] = 1.21781;
	arcos[690] = 1.21573;
	arcos[691] = 1.21364;
	arcos[692] = 1.21156;
	arcos[693] = 1.20947;
	arcos[694] = 1.20738;
	arcos[695] = 1.20529;
	arcos[696] = 1.2032;
	arcos[697] = 1.2011;
	arcos[698] = 1.19901;
	arcos[699] = 1.19691;
	arcos[700] = 1.19481;
	arcos[701] = 1.19271;
	arcos[702] = 1.19061;
	arcos[703] = 1.18851;
	arcos[704] = 1.1864;
	arcos[705] = 1.18429;
	arcos[706] = 1.18218;
	arcos[707] = 1.18007;
	arcos[708] = 1.17796;
	arcos[709] = 1.17584;
	arcos[710] = 1.17373;
	arcos[711] = 1.17161;
	arcos[712] = 1.16949;
	arcos[713] = 1.16736;
	arcos[714] = 1.16524;
	arcos[715] = 1.16311;
	arcos[716] = 1.16098;
	arcos[717] = 1.15885;
	arcos[718] = 1.15672;
	arcos[719] = 1.15459;
	arcos[720] = 1.15245;
	arcos[721] = 1.15031;
	arcos[722] = 1.14817;
	arcos[723] = 1.14603;
	arcos[724] = 1.14388;
	arcos[725] = 1.14174;
	arcos[726] = 1.13959;
	arcos[727] = 1.13744;
	arcos[728] = 1.13528;
	arcos[729] = 1.13313;
	arcos[730] = 1.13097;
	arcos[731] = 1.12881;
	arcos[732] = 1.12665;
	arcos[733] = 1.12449;
	arcos[734] = 1.12232;
	arcos[735] = 1.12015;
	arcos[736] = 1.11798;
	arcos[737] = 1.11581;
	arcos[738] = 1.11363;
	arcos[739] = 1.11145;
	arcos[740] = 1.10927;
	arcos[741] = 1.10709;
	arcos[742] = 1.10491;
	arcos[743] = 1.10272;
	arcos[744] = 1.10053;
	arcos[745] = 1.09834;
	arcos[746] = 1.09614;
	arcos[747] = 1.09394;
	arcos[748] = 1.09175;
	arcos[749] = 1.08954;
	arcos[750] = 1.08734;
	arcos[751] = 1.08513;
	arcos[752] = 1.08292;
	arcos[753] = 1.08071;
	arcos[754] = 1.07849;
	arcos[755] = 1.07628;
	arcos[756] = 1.07406;
	arcos[757] = 1.07183;
	arcos[758] = 1.06961;
	arcos[759] = 1.06738;
	arcos[760] = 1.06515;
	arcos[761] = 1.06291;
	arcos[762] = 1.06068;
	arcos[763] = 1.05844;
	arcos[764] = 1.0562;
	arcos[765] = 1.05395;
	arcos[766] = 1.0517;
	arcos[767] = 1.04945;
	arcos[768] = 1.0472;
	arcos[769] = 1.04494;
	arcos[770] = 1.04268;
	arcos[771] = 1.04042;
	arcos[772] = 1.03815;
	arcos[773] = 1.03588;
	arcos[774] = 1.03361;
	arcos[775] = 1.03134;
	arcos[776] = 1.02906;
	arcos[777] = 1.02678;
	arcos[778] = 1.02449;
	arcos[779] = 1.02221;
	arcos[780] = 1.01992;
	arcos[781] = 1.01762;
	arcos[782] = 1.01533;
	arcos[783] = 1.01302;
	arcos[784] = 1.01072;
	arcos[785] = 1.00841;
	arcos[786] = 1.0061;
	arcos[787] = 1.00379;
	arcos[788] = 1.00147;
	arcos[789] = 0.999152;
	arcos[790] = 0.996828;
	arcos[791] = 0.9945;
	arcos[792] = 0.992169;
	arcos[793] = 0.989835;
	arcos[794] = 0.987496;
	arcos[795] = 0.985155;
	arcos[796] = 0.982809;
	arcos[797] = 0.98046;
	arcos[798] = 0.978107;
	arcos[799] = 0.97575;
	arcos[800] = 0.97339;
	arcos[801] = 0.971026;
	arcos[802] = 0.968658;
	arcos[803] = 0.966286;
	arcos[804] = 0.96391;
	arcos[805] = 0.96153;
	arcos[806] = 0.959147;
	arcos[807] = 0.956759;
	arcos[808] = 0.954367;
	arcos[809] = 0.951972;
	arcos[810] = 0.949572;
	arcos[811] = 0.947168;
	arcos[812] = 0.94476;
	arcos[813] = 0.942348;
	arcos[814] = 0.939931;
	arcos[815] = 0.93751;
	arcos[816] = 0.935085;
	arcos[817] = 0.932656;
	arcos[818] = 0.930222;
	arcos[819] = 0.927783;
	arcos[820] = 0.925341;
	arcos[821] = 0.922893;
	arcos[822] = 0.920442;
	arcos[823] = 0.917985;
	arcos[824] = 0.915524;
	arcos[825] = 0.913059;
	arcos[826] = 0.910588;
	arcos[827] = 0.908113;
	arcos[828] = 0.905633;
	arcos[829] = 0.903148;
	arcos[830] = 0.900659;
	arcos[831] = 0.898164;
	arcos[832] = 0.895665;
	arcos[833] = 0.89316;
	arcos[834] = 0.890651;
	arcos[835] = 0.888136;
	arcos[836] = 0.885616;
	arcos[837] = 0.883091;
	arcos[838] = 0.880561;
	arcos[839] = 0.878025;
	arcos[840] = 0.875484;
	arcos[841] = 0.872938;
	arcos[842] = 0.870386;
	arcos[843] = 0.867829;
	arcos[844] = 0.865266;
	arcos[845] = 0.862698;
	arcos[846] = 0.860124;
	arcos[847] = 0.857544;
	arcos[848] = 0.854958;
	arcos[849] = 0.852367;
	arcos[850] = 0.84977;
	arcos[851] = 0.847166;
	arcos[852] = 0.844557;
	arcos[853] = 0.841942;
	arcos[854] = 0.83932;
	arcos[855] = 0.836693;
	arcos[856] = 0.834059;
	arcos[857] = 0.831419;
	arcos[858] = 0.828772;
	arcos[859] = 0.826119;
	arcos[860] = 0.82346;
	arcos[861] = 0.820794;
	arcos[862] = 0.818121;
	arcos[863] = 0.815442;
	arcos[864] = 0.812756;
	arcos[865] = 0.810063;
	arcos[866] = 0.807363;
	arcos[867] = 0.804656;
	arcos[868] = 0.801942;
	arcos[869] = 0.799221;
	arcos[870] = 0.796492;
	arcos[871] = 0.793757;
	arcos[872] = 0.791014;
	arcos[873] = 0.788263;
	arcos[874] = 0.785505;
	arcos[875] = 0.782739;
	arcos[876] = 0.779966;
	arcos[877] = 0.777185;
	arcos[878] = 0.774396;
	arcos[879] = 0.771599;
	arcos[880] = 0.768794;
	arcos[881] = 0.76598;
	arcos[882] = 0.763159;
	arcos[883] = 0.760329;
	arcos[884] = 0.757491;
	arcos[885] = 0.754644;
	arcos[886] = 0.751788;
	arcos[887] = 0.748924;
	arcos[888] = 0.746051;
	arcos[889] = 0.743169;
	arcos[890] = 0.740278;
	arcos[891] = 0.737377;
	arcos[892] = 0.734468;
	arcos[893] = 0.731549;
	arcos[894] = 0.72862;
	arcos[895] = 0.725682;
	arcos[896] = 0.722734;
	arcos[897] = 0.719776;
	arcos[898] = 0.716809;
	arcos[899] = 0.713831;
	arcos[900] = 0.710842;
	arcos[901] = 0.707844;
	arcos[902] = 0.704835;
	arcos[903] = 0.701815;
	arcos[904] = 0.698784;
	arcos[905] = 0.695742;
	arcos[906] = 0.69269;
	arcos[907] = 0.689625;
	arcos[908] = 0.68655;
	arcos[909] = 0.683463;
	arcos[910] = 0.680364;
	arcos[911] = 0.677253;
	arcos[912] = 0.67413;
	arcos[913] = 0.670995;
	arcos[914] = 0.667848;
	arcos[915] = 0.664688;
	arcos[916] = 0.661515;
	arcos[917] = 0.658329;
	arcos[918] = 0.65513;
	arcos[919] = 0.651918;
	arcos[920] = 0.648692;
	arcos[921] = 0.645452;
	arcos[922] = 0.642198;
	arcos[923] = 0.63893;
	arcos[924] = 0.635647;
	arcos[925] = 0.63235;
	arcos[926] = 0.629038;
	arcos[927] = 0.625711;
	arcos[928] = 0.622369;
	arcos[929] = 0.61901;
	arcos[930] = 0.615636;
	arcos[931] = 0.612246;
	arcos[932] = 0.608839;
	arcos[933] = 0.605416;
	arcos[934] = 0.601975;
	arcos[935] = 0.598517;
	arcos[936] = 0.595042;
	arcos[937] = 0.591549;
	arcos[938] = 0.588037;
	arcos[939] = 0.584507;
	arcos[940] = 0.580958;
	arcos[941] = 0.577389;
	arcos[942] = 0.573801;
	arcos[943] = 0.570193;
	arcos[944] = 0.566564;
	arcos[945] = 0.562915;
	arcos[946] = 0.559244;
	arcos[947] = 0.555552;
	arcos[948] = 0.551838;
	arcos[949] = 0.548101;
	arcos[950] = 0.544341;
	arcos[951] = 0.540558;
	arcos[952] = 0.53675;
	arcos[953] = 0.532918;
	arcos[954] = 0.529061;
	arcos[955] = 0.525179;
	arcos[956] = 0.52127;
	arcos[957] = 0.517334;
	arcos[958] = 0.513371;
	arcos[959] = 0.50938;
	arcos[960] = 0.50536;
	arcos[961] = 0.501311;
	arcos[962] = 0.497232;
	arcos[963] = 0.493122;
	arcos[964] = 0.48898;
	arcos[965] = 0.484805;
	arcos[966] = 0.480598;
	arcos[967] = 0.476356;
	arcos[968] = 0.472079;
	arcos[969] = 0.467765;
	arcos[970] = 0.463415;
	arcos[971] = 0.459026;
	arcos[972] = 0.454598;
	arcos[973] = 0.45013;
	arcos[974] = 0.44562;
	arcos[975] = 0.441067;
	arcos[976] = 0.436469;
	arcos[977] = 0.431826;
	arcos[978] = 0.427135;
	arcos[979] = 0.422396;
	arcos[980] = 0.417606;
	arcos[981] = 0.412764;
	arcos[982] = 0.407868;
	arcos[983] = 0.402915;
	arcos[984] = 0.397904;
	arcos[985] = 0.392833;
	arcos[986] = 0.387699;
	arcos[987] = 0.3825;
	arcos[988] = 0.377233;
	arcos[989] = 0.371894;
	arcos[990] = 0.366482;
	arcos[991] = 0.360992;
	arcos[992] = 0.355421;
	arcos[993] = 0.349765;
	arcos[994] = 0.344021;
	arcos[995] = 0.338182;
	arcos[996] = 0.332245;
	arcos[997] = 0.326204;
	arcos[998] = 0.320053;
	arcos[999] = 0.313786;
	arcos[1000] = 0.307395;
	arcos[1001] = 0.300873;
	arcos[1002] = 0.294211;
	arcos[1003] = 0.287399;
	arcos[1004] = 0.280426;
	arcos[1005] = 0.273281;
	arcos[1006] = 0.265948;
	arcos[1007] = 0.258413;
	arcos[1008] = 0.250656;
	arcos[1009] = 0.242656;
	arcos[1010] = 0.23439;
	arcos[1011] = 0.225827;
	arcos[1012] = 0.216931;
	arcos[1013] = 0.207662;
	arcos[1014] = 0.197965;
	arcos[1015] = 0.187776;
	arcos[1016] = 0.177008;
	arcos[1017] = 0.165548;
	arcos[1018] = 0.153243;
	arcos[1019] = 0.139868;
	arcos[1020] = 0.125082;
	arcos[1021] = 0.108306;
	arcos[1022] = 0.0884171;
	arcos[1023] = 0.0625102;

}
void init_cosign()

{
	cosin[0] = 1;
	cosin[1] = 0.999981;
	cosin[2] = 0.999925;
	cosin[3] = 0.999831;
	cosin[4] = 0.999699;
	cosin[5] = 0.999529;
	cosin[6] = 0.999322;
	cosin[7] = 0.999078;
	cosin[8] = 0.998795;
	cosin[9] = 0.998476;
	cosin[10] = 0.998118;
	cosin[11] = 0.997723;
	cosin[12] = 0.99729;
	cosin[13] = 0.99682;
	cosin[14] = 0.996313;
	cosin[15] = 0.995767;
	cosin[16] = 0.995185;
	cosin[17] = 0.994565;
	cosin[18] = 0.993907;
	cosin[19] = 0.993212;
	cosin[20] = 0.99248;
	cosin[21] = 0.99171;
	cosin[22] = 0.990903;
	cosin[23] = 0.990058;
	cosin[24] = 0.989177;
	cosin[25] = 0.988258;
	cosin[26] = 0.987301;
	cosin[27] = 0.986308;
	cosin[28] = 0.985278;
	cosin[29] = 0.98421;
	cosin[30] = 0.983105;
	cosin[31] = 0.981964;
	cosin[32] = 0.980785;
	cosin[33] = 0.97957;
	cosin[34] = 0.978317;
	cosin[35] = 0.977028;
	cosin[36] = 0.975702;
	cosin[37] = 0.974339;
	cosin[38] = 0.97294;
	cosin[39] = 0.971504;
	cosin[40] = 0.970031;
	cosin[41] = 0.968522;
	cosin[42] = 0.966976;
	cosin[43] = 0.965394;
	cosin[44] = 0.963776;
	cosin[45] = 0.962121;
	cosin[46] = 0.960431;
	cosin[47] = 0.958703;
	cosin[48] = 0.95694;
	cosin[49] = 0.955141;
	cosin[50] = 0.953306;
	cosin[51] = 0.951435;
	cosin[52] = 0.949528;
	cosin[53] = 0.947586;
	cosin[54] = 0.945607;
	cosin[55] = 0.943594;
	cosin[56] = 0.941544;
	cosin[57] = 0.939459;
	cosin[58] = 0.937339;
	cosin[59] = 0.935184;
	cosin[60] = 0.932993;
	cosin[61] = 0.930767;
	cosin[62] = 0.928506;
	cosin[63] = 0.92621;
	cosin[64] = 0.92388;
	cosin[65] = 0.921514;
	cosin[66] = 0.919114;
	cosin[67] = 0.916679;
	cosin[68] = 0.91421;
	cosin[69] = 0.911706;
	cosin[70] = 0.909168;
	cosin[71] = 0.906596;
	cosin[72] = 0.903989;
	cosin[73] = 0.901349;
	cosin[74] = 0.898675;
	cosin[75] = 0.895966;
	cosin[76] = 0.893224;
	cosin[77] = 0.890449;
	cosin[78] = 0.88764;
	cosin[79] = 0.884797;
	cosin[80] = 0.881921;
	cosin[81] = 0.879012;
	cosin[82] = 0.87607;
	cosin[83] = 0.873095;
	cosin[84] = 0.870087;
	cosin[85] = 0.867046;
	cosin[86] = 0.863973;
	cosin[87] = 0.860867;
	cosin[88] = 0.857729;
	cosin[89] = 0.854558;
	cosin[90] = 0.851355;
	cosin[91] = 0.848121;
	cosin[92] = 0.844854;
	cosin[93] = 0.841555;
	cosin[94] = 0.838225;
	cosin[95] = 0.834863;
	cosin[96] = 0.83147;
	cosin[97] = 0.828045;
	cosin[98] = 0.824589;
	cosin[99] = 0.821103;
	cosin[100] = 0.817585;
	cosin[101] = 0.814036;
	cosin[102] = 0.810457;
	cosin[103] = 0.806848;
	cosin[104] = 0.803208;
	cosin[105] = 0.799537;
	cosin[106] = 0.795837;
	cosin[107] = 0.792107;
	cosin[108] = 0.788346;
	cosin[109] = 0.784557;
	cosin[110] = 0.780737;
	cosin[111] = 0.776888;
	cosin[112] = 0.77301;
	cosin[113] = 0.769103;
	cosin[114] = 0.765167;
	cosin[115] = 0.761202;
	cosin[116] = 0.757209;
	cosin[117] = 0.753187;
	cosin[118] = 0.749136;
	cosin[119] = 0.745058;
	cosin[120] = 0.740951;
	cosin[121] = 0.736816;
	cosin[122] = 0.732654;
	cosin[123] = 0.728464;
	cosin[124] = 0.724247;
	cosin[125] = 0.720002;
	cosin[126] = 0.715731;
	cosin[127] = 0.711432;
	cosin[128] = 0.707107;
	cosin[129] = 0.702754;
	cosin[130] = 0.698376;
	cosin[131] = 0.693971;
	cosin[132] = 0.68954;
	cosin[133] = 0.685083;
	cosin[134] = 0.680601;
	cosin[135] = 0.676092;
	cosin[136] = 0.671559;
	cosin[137] = 0.667;
	cosin[138] = 0.662415;
	cosin[139] = 0.657806;
	cosin[140] = 0.653172;
	cosin[141] = 0.648514;
	cosin[142] = 0.643831;
	cosin[143] = 0.639124;
	cosin[144] = 0.634393;
	cosin[145] = 0.629638;
	cosin[146] = 0.624859;
	cosin[147] = 0.620057;
	cosin[148] = 0.615231;
	cosin[149] = 0.610382;
	cosin[150] = 0.60551;
	cosin[151] = 0.600616;
	cosin[152] = 0.595699;
	cosin[153] = 0.590759;
	cosin[154] = 0.585797;
	cosin[155] = 0.580813;
	cosin[156] = 0.575808;
	cosin[157] = 0.57078;
	cosin[158] = 0.565731;
	cosin[159] = 0.560661;
	cosin[160] = 0.555569;
	cosin[161] = 0.550457;
	cosin[162] = 0.545324;
	cosin[163] = 0.540171;
	cosin[164] = 0.534997;
	cosin[165] = 0.529803;
	cosin[166] = 0.524589;
	cosin[167] = 0.519355;
	cosin[168] = 0.514102;
	cosin[169] = 0.508829;
	cosin[170] = 0.503537;
	cosin[171] = 0.498227;
	cosin[172] = 0.492897;
	cosin[173] = 0.487549;
	cosin[174] = 0.482183;
	cosin[175] = 0.476798;
	cosin[176] = 0.471396;
	cosin[177] = 0.465975;
	cosin[178] = 0.460538;
	cosin[179] = 0.455083;
	cosin[180] = 0.44961;
	cosin[181] = 0.444121;
	cosin[182] = 0.438615;
	cosin[183] = 0.433093;
	cosin[184] = 0.427554;
	cosin[185] = 0.421999;
	cosin[186] = 0.416428;
	cosin[187] = 0.410842;
	cosin[188] = 0.40524;
	cosin[189] = 0.399623;
	cosin[190] = 0.393991;
	cosin[191] = 0.388344;
	cosin[192] = 0.382682;
	cosin[193] = 0.377006;
	cosin[194] = 0.371316;
	cosin[195] = 0.365612;
	cosin[196] = 0.359894;
	cosin[197] = 0.354162;
	cosin[198] = 0.348417;
	cosin[199] = 0.342659;
	cosin[200] = 0.336888;
	cosin[201] = 0.331105;
	cosin[202] = 0.325309;
	cosin[203] = 0.319501;
	cosin[204] = 0.31368;
	cosin[205] = 0.307848;
	cosin[206] = 0.302004;
	cosin[207] = 0.296149;
	cosin[208] = 0.290283;
	cosin[209] = 0.284406;
	cosin[210] = 0.278518;
	cosin[211] = 0.27262;
	cosin[212] = 0.266711;
	cosin[213] = 0.260792;
	cosin[214] = 0.254864;
	cosin[215] = 0.248926;
	cosin[216] = 0.242978;
	cosin[217] = 0.237022;
	cosin[218] = 0.231056;
	cosin[219] = 0.225082;
	cosin[220] = 0.219099;
	cosin[221] = 0.213108;
	cosin[222] = 0.207109;
	cosin[223] = 0.201103;
	cosin[224] = 0.195088;
	cosin[225] = 0.189067;
	cosin[226] = 0.183038;
	cosin[227] = 0.177002;
	cosin[228] = 0.17096;
	cosin[229] = 0.164911;
	cosin[230] = 0.158856;
	cosin[231] = 0.152795;
	cosin[232] = 0.146728;
	cosin[233] = 0.140656;
	cosin[234] = 0.134579;
	cosin[235] = 0.128496;
	cosin[236] = 0.122408;
	cosin[237] = 0.116316;
	cosin[238] = 0.11022;
	cosin[239] = 0.104119;
	cosin[240] = 0.0980149;
	cosin[241] = 0.0919067;
	cosin[242] = 0.085795;
	cosin[243] = 0.0796801;
	cosin[244] = 0.0735622;
	cosin[245] = 0.0674416;
	cosin[246] = 0.0613184;
	cosin[247] = 0.0551929;
	cosin[248] = 0.0490653;
	cosin[249] = 0.0429358;
	cosin[250] = 0.0368048;
	cosin[251] = 0.0306723;
	cosin[252] = 0.0245388;
	cosin[253] = 0.0184042;
	cosin[254] = 0.012269;
	cosin[255] = 0.00613336;
	cosin[256] = -2.54711e-06;
	cosin[257] = -0.00613845;
	cosin[258] = -0.0122741;
	cosin[259] = -0.0184093;
	cosin[260] = -0.0245438;
	cosin[261] = -0.0306774;
	cosin[262] = -0.0368099;
	cosin[263] = -0.0429409;
	cosin[264] = -0.0490704;
	cosin[265] = -0.0551979;
	cosin[266] = -0.0613235;
	cosin[267] = -0.0674466;
	cosin[268] = -0.0735673;
	cosin[269] = -0.0796852;
	cosin[270] = -0.0858001;
	cosin[271] = -0.0919118;
	cosin[272] = -0.09802;
	cosin[273] = -0.104124;
	cosin[274] = -0.110225;
	cosin[275] = -0.116321;
	cosin[276] = -0.122414;
	cosin[277] = -0.128501;
	cosin[278] = -0.134584;
	cosin[279] = -0.140661;
	cosin[280] = -0.146733;
	cosin[281] = -0.1528;
	cosin[282] = -0.158861;
	cosin[283] = -0.164916;
	cosin[284] = -0.170965;
	cosin[285] = -0.177007;
	cosin[286] = -0.183043;
	cosin[287] = -0.189072;
	cosin[288] = -0.195093;
	cosin[289] = -0.201108;
	cosin[290] = -0.207114;
	cosin[291] = -0.213113;
	cosin[292] = -0.219104;
	cosin[293] = -0.225087;
	cosin[294] = -0.231061;
	cosin[295] = -0.237027;
	cosin[296] = -0.242983;
	cosin[297] = -0.248931;
	cosin[298] = -0.254869;
	cosin[299] = -0.260797;
	cosin[300] = -0.266716;
	cosin[301] = -0.272625;
	cosin[302] = -0.278523;
	cosin[303] = -0.284411;
	cosin[304] = -0.290288;
	cosin[305] = -0.296154;
	cosin[306] = -0.302009;
	cosin[307] = -0.307853;
	cosin[308] = -0.313685;
	cosin[309] = -0.319505;
	cosin[310] = -0.325314;
	cosin[311] = -0.33111;
	cosin[312] = -0.336893;
	cosin[313] = -0.342664;
	cosin[314] = -0.348422;
	cosin[315] = -0.354167;
	cosin[316] = -0.359898;
	cosin[317] = -0.365616;
	cosin[318] = -0.371321;
	cosin[319] = -0.377011;
	cosin[320] = -0.382687;
	cosin[321] = -0.388348;
	cosin[322] = -0.393995;
	cosin[323] = -0.399628;
	cosin[324] = -0.405245;
	cosin[325] = -0.410847;
	cosin[326] = -0.416433;
	cosin[327] = -0.422004;
	cosin[328] = -0.427559;
	cosin[329] = -0.433097;
	cosin[330] = -0.43862;
	cosin[331] = -0.444126;
	cosin[332] = -0.449615;
	cosin[333] = -0.455087;
	cosin[334] = -0.460542;
	cosin[335] = -0.46598;
	cosin[336] = -0.4714;
	cosin[337] = -0.476803;
	cosin[338] = -0.482187;
	cosin[339] = -0.487554;
	cosin[340] = -0.492902;
	cosin[341] = -0.498231;
	cosin[342] = -0.503542;
	cosin[343] = -0.508834;
	cosin[344] = -0.514106;
	cosin[345] = -0.519359;
	cosin[346] = -0.524593;
	cosin[347] = -0.529807;
	cosin[348] = -0.535001;
	cosin[349] = -0.540175;
	cosin[350] = -0.545328;
	cosin[351] = -0.550461;
	cosin[352] = -0.555574;
	cosin[353] = -0.560665;
	cosin[354] = -0.565735;
	cosin[355] = -0.570784;
	cosin[356] = -0.575812;
	cosin[357] = -0.580817;
	cosin[358] = -0.585801;
	cosin[359] = -0.590763;
	cosin[360] = -0.595703;
	cosin[361] = -0.60062;
	cosin[362] = -0.605515;
	cosin[363] = -0.610386;
	cosin[364] = -0.615235;
	cosin[365] = -0.620061;
	cosin[366] = -0.624863;
	cosin[367] = -0.629642;
	cosin[368] = -0.634397;
	cosin[369] = -0.639128;
	cosin[370] = -0.643835;
	cosin[371] = -0.648518;
	cosin[372] = -0.653176;
	cosin[373] = -0.65781;
	cosin[374] = -0.662419;
	cosin[375] = -0.667003;
	cosin[376] = -0.671562;
	cosin[377] = -0.676096;
	cosin[378] = -0.680604;
	cosin[379] = -0.685087;
	cosin[380] = -0.689544;
	cosin[381] = -0.693975;
	cosin[382] = -0.69838;
	cosin[383] = -0.702758;
	cosin[384] = -0.70711;
	cosin[385] = -0.711436;
	cosin[386] = -0.715734;
	cosin[387] = -0.720006;
	cosin[388] = -0.72425;
	cosin[389] = -0.728468;
	cosin[390] = -0.732658;
	cosin[391] = -0.73682;
	cosin[392] = -0.740954;
	cosin[393] = -0.745061;
	cosin[394] = -0.74914;
	cosin[395] = -0.75319;
	cosin[396] = -0.757212;
	cosin[397] = -0.761206;
	cosin[398] = -0.765171;
	cosin[399] = -0.769107;
	cosin[400] = -0.773014;
	cosin[401] = -0.776892;
	cosin[402] = -0.78074;
	cosin[403] = -0.78456;
	cosin[404] = -0.78835;
	cosin[405] = -0.79211;
	cosin[406] = -0.79584;
	cosin[407] = -0.79954;
	cosin[408] = -0.803211;
	cosin[409] = -0.806851;
	cosin[410] = -0.81046;
	cosin[411] = -0.814039;
	cosin[412] = -0.817588;
	cosin[413] = -0.821106;
	cosin[414] = -0.824592;
	cosin[415] = -0.828048;
	cosin[416] = -0.831473;
	cosin[417] = -0.834866;
	cosin[418] = -0.838228;
	cosin[419] = -0.841558;
	cosin[420] = -0.844856;
	cosin[421] = -0.848123;
	cosin[422] = -0.851358;
	cosin[423] = -0.854561;
	cosin[424] = -0.857731;
	cosin[425] = -0.86087;
	cosin[426] = -0.863976;
	cosin[427] = -0.867049;
	cosin[428] = -0.87009;
	cosin[429] = -0.873098;
	cosin[430] = -0.876073;
	cosin[431] = -0.879015;
	cosin[432] = -0.881924;
	cosin[433] = -0.8848;
	cosin[434] = -0.887642;
	cosin[435] = -0.890451;
	cosin[436] = -0.893227;
	cosin[437] = -0.895969;
	cosin[438] = -0.898677;
	cosin[439] = -0.901351;
	cosin[440] = -0.903992;
	cosin[441] = -0.906598;
	cosin[442] = -0.90917;
	cosin[443] = -0.911708;
	cosin[444] = -0.914212;
	cosin[445] = -0.916681;
	cosin[446] = -0.919116;
	cosin[447] = -0.921516;
	cosin[448] = -0.923882;
	cosin[449] = -0.926212;
	cosin[450] = -0.928508;
	cosin[451] = -0.930769;
	cosin[452] = -0.932995;
	cosin[453] = -0.935186;
	cosin[454] = -0.937341;
	cosin[455] = -0.939461;
	cosin[456] = -0.941546;
	cosin[457] = -0.943595;
	cosin[458] = -0.945609;
	cosin[459] = -0.947588;
	cosin[460] = -0.94953;
	cosin[461] = -0.951437;
	cosin[462] = -0.953308;
	cosin[463] = -0.955143;
	cosin[464] = -0.956942;
	cosin[465] = -0.958705;
	cosin[466] = -0.960432;
	cosin[467] = -0.962123;
	cosin[468] = -0.963778;
	cosin[469] = -0.965396;
	cosin[470] = -0.966978;
	cosin[471] = -0.968524;
	cosin[472] = -0.970033;
	cosin[473] = -0.971505;
	cosin[474] = -0.972941;
	cosin[475] = -0.974341;
	cosin[476] = -0.975704;
	cosin[477] = -0.97703;
	cosin[478] = -0.978319;
	cosin[479] = -0.979571;
	cosin[480] = -0.980787;
	cosin[481] = -0.981965;
	cosin[482] = -0.983107;
	cosin[483] = -0.984211;
	cosin[484] = -0.985279;
	cosin[485] = -0.986309;
	cosin[486] = -0.987302;
	cosin[487] = -0.988259;
	cosin[488] = -0.989177;
	cosin[489] = -0.990059;
	cosin[490] = -0.990903;
	cosin[491] = -0.991711;
	cosin[492] = -0.99248;
	cosin[493] = -0.993213;
	cosin[494] = -0.993908;
	cosin[495] = -0.994565;
	cosin[496] = -0.995185;
	cosin[497] = -0.995768;
	cosin[498] = -0.996313;
	cosin[499] = -0.996821;
	cosin[500] = -0.997291;
	cosin[501] = -0.997724;
	cosin[502] = -0.998119;
	cosin[503] = -0.998476;
	cosin[504] = -0.998796;
	cosin[505] = -0.999078;
	cosin[506] = -0.999323;
	cosin[507] = -0.99953;
	cosin[508] = -0.999699;
	cosin[509] = -0.999831;
	cosin[510] = -0.999925;
	cosin[511] = -0.999981;
	cosin[512] = -1;
	cosin[513] = -0.999981;
	cosin[514] = -0.999925;
	cosin[515] = -0.99983;
	cosin[516] = -0.999699;
	cosin[517] = -0.999529;
	cosin[518] = -0.999322;
	cosin[519] = -0.999077;
	cosin[520] = -0.998795;
	cosin[521] = -0.998475;
	cosin[522] = -0.998118;
	cosin[523] = -0.997723;
	cosin[524] = -0.99729;
	cosin[525] = -0.99682;
	cosin[526] = -0.996312;
	cosin[527] = -0.995767;
	cosin[528] = -0.995184;
	cosin[529] = -0.994564;
	cosin[530] = -0.993906;
	cosin[531] = -0.993211;
	cosin[532] = -0.992479;
	cosin[533] = -0.991709;
	cosin[534] = -0.990902;
	cosin[535] = -0.990057;
	cosin[536] = -0.989175;
	cosin[537] = -0.988256;
	cosin[538] = -0.9873;
	cosin[539] = -0.986307;
	cosin[540] = -0.985276;
	cosin[541] = -0.984209;
	cosin[542] = -0.983104;
	cosin[543] = -0.981962;
	cosin[544] = -0.980784;
	cosin[545] = -0.979568;
	cosin[546] = -0.978316;
	cosin[547] = -0.977027;
	cosin[548] = -0.9757;
	cosin[549] = -0.974338;
	cosin[550] = -0.972938;
	cosin[551] = -0.971502;
	cosin[552] = -0.970029;
	cosin[553] = -0.96852;
	cosin[554] = -0.966974;
	cosin[555] = -0.965392;
	cosin[556] = -0.963774;
	cosin[557] = -0.962119;
	cosin[558] = -0.960428;
	cosin[559] = -0.958701;
	cosin[560] = -0.956938;
	cosin[561] = -0.955139;
	cosin[562] = -0.953304;
	cosin[563] = -0.951433;
	cosin[564] = -0.949526;
	cosin[565] = -0.947583;
	cosin[566] = -0.945605;
	cosin[567] = -0.943591;
	cosin[568] = -0.941541;
	cosin[569] = -0.939456;
	cosin[570] = -0.937336;
	cosin[571] = -0.935181;
	cosin[572] = -0.93299;
	cosin[573] = -0.930764;
	cosin[574] = -0.928503;
	cosin[575] = -0.926207;
	cosin[576] = -0.923876;
	cosin[577] = -0.921511;
	cosin[578] = -0.919111;
	cosin[579] = -0.916676;
	cosin[580] = -0.914206;
	cosin[581] = -0.911703;
	cosin[582] = -0.909165;
	cosin[583] = -0.906592;
	cosin[584] = -0.903986;
	cosin[585] = -0.901345;
	cosin[586] = -0.898671;
	cosin[587] = -0.895963;
	cosin[588] = -0.893221;
	cosin[589] = -0.890445;
	cosin[590] = -0.887636;
	cosin[591] = -0.884793;
	cosin[592] = -0.881917;
	cosin[593] = -0.879008;
	cosin[594] = -0.876066;
	cosin[595] = -0.873091;
	cosin[596] = -0.870083;
	cosin[597] = -0.867042;
	cosin[598] = -0.863969;
	cosin[599] = -0.860863;
	cosin[600] = -0.857724;
	cosin[601] = -0.854554;
	cosin[602] = -0.851351;
	cosin[603] = -0.848116;
	cosin[604] = -0.844849;
	cosin[605] = -0.84155;
	cosin[606] = -0.83822;
	cosin[607] = -0.834858;
	cosin[608] = -0.831465;
	cosin[609] = -0.82804;
	cosin[610] = -0.824584;
	cosin[611] = -0.821098;
	cosin[612] = -0.81758;
	cosin[613] = -0.814031;
	cosin[614] = -0.810452;
	cosin[615] = -0.806842;
	cosin[616] = -0.803202;
	cosin[617] = -0.799532;
	cosin[618] = -0.795832;
	cosin[619] = -0.792101;
	cosin[620] = -0.788341;
	cosin[621] = -0.784551;
	cosin[622] = -0.780732;
	cosin[623] = -0.776883;
	cosin[624] = -0.773005;
	cosin[625] = -0.769098;
	cosin[626] = -0.765161;
	cosin[627] = -0.761197;
	cosin[628] = -0.757203;
	cosin[629] = -0.753181;
	cosin[630] = -0.74913;
	cosin[631] = -0.745052;
	cosin[632] = -0.740945;
	cosin[633] = -0.73681;
	cosin[634] = -0.732648;
	cosin[635] = -0.728458;
	cosin[636] = -0.724241;
	cosin[637] = -0.719996;
	cosin[638] = -0.715724;
	cosin[639] = -0.711426;
	cosin[640] = -0.7071;
	cosin[641] = -0.702748;
	cosin[642] = -0.69837;
	cosin[643] = -0.693965;
	cosin[644] = -0.689534;
	cosin[645] = -0.685077;
	cosin[646] = -0.680594;
	cosin[647] = -0.676086;
	cosin[648] = -0.671552;
	cosin[649] = -0.666993;
	cosin[650] = -0.662409;
	cosin[651] = -0.6578;
	cosin[652] = -0.653166;
	cosin[653] = -0.648507;
	cosin[654] = -0.643824;
	cosin[655] = -0.639117;
	cosin[656] = -0.634386;
	cosin[657] = -0.629631;
	cosin[658] = -0.624852;
	cosin[659] = -0.62005;
	cosin[660] = -0.615224;
	cosin[661] = -0.610375;
	cosin[662] = -0.605503;
	cosin[663] = -0.600609;
	cosin[664] = -0.595692;
	cosin[665] = -0.590752;
	cosin[666] = -0.58579;
	cosin[667] = -0.580806;
	cosin[668] = -0.5758;
	cosin[669] = -0.570773;
	cosin[670] = -0.565724;
	cosin[671] = -0.560654;
	cosin[672] = -0.555562;
	cosin[673] = -0.55045;
	cosin[674] = -0.545317;
	cosin[675] = -0.540163;
	cosin[676] = -0.534989;
	cosin[677] = -0.529795;
	cosin[678] = -0.524581;
	cosin[679] = -0.519348;
	cosin[680] = -0.514094;
	cosin[681] = -0.508822;
	cosin[682] = -0.50353;
	cosin[683] = -0.498219;
	cosin[684] = -0.492889;
	cosin[685] = -0.487541;
	cosin[686] = -0.482175;
	cosin[687] = -0.47679;
	cosin[688] = -0.471388;
	cosin[689] = -0.465968;
	cosin[690] = -0.46053;
	cosin[691] = -0.455075;
	cosin[692] = -0.449602;
	cosin[693] = -0.444113;
	cosin[694] = -0.438607;
	cosin[695] = -0.433085;
	cosin[696] = -0.427546;
	cosin[697] = -0.421991;
	cosin[698] = -0.41642;
	cosin[699] = -0.410834;
	cosin[700] = -0.405232;
	cosin[701] = -0.399615;
	cosin[702] = -0.393983;
	cosin[703] = -0.388336;
	cosin[704] = -0.382674;
	cosin[705] = -0.376998;
	cosin[706] = -0.371308;
	cosin[707] = -0.365603;
	cosin[708] = -0.359885;
	cosin[709] = -0.354154;
	cosin[710] = -0.348409;
	cosin[711] = -0.342651;
	cosin[712] = -0.33688;
	cosin[713] = -0.331096;
	cosin[714] = -0.3253;
	cosin[715] = -0.319492;
	cosin[716] = -0.313672;
	cosin[717] = -0.30784;
	cosin[718] = -0.301996;
	cosin[719] = -0.296141;
	cosin[720] = -0.290275;
	cosin[721] = -0.284397;
	cosin[722] = -0.278509;
	cosin[723] = -0.272611;
	cosin[724] = -0.266702;
	cosin[725] = -0.260784;
	cosin[726] = -0.254855;
	cosin[727] = -0.248917;
	cosin[728] = -0.24297;
	cosin[729] = -0.237013;
	cosin[730] = -0.231048;
	cosin[731] = -0.225073;
	cosin[732] = -0.219091;
	cosin[733] = -0.2131;
	cosin[734] = -0.207101;
	cosin[735] = -0.201094;
	cosin[736] = -0.19508;
	cosin[737] = -0.189058;
	cosin[738] = -0.183029;
	cosin[739] = -0.176993;
	cosin[740] = -0.170951;
	cosin[741] = -0.164902;
	cosin[742] = -0.158847;
	cosin[743] = -0.152786;
	cosin[744] = -0.14672;
	cosin[745] = -0.140647;
	cosin[746] = -0.13457;
	cosin[747] = -0.128487;
	cosin[748] = -0.1224;
	cosin[749] = -0.116308;
	cosin[750] = -0.110211;
	cosin[751] = -0.104111;
	cosin[752] = -0.098006;
	cosin[753] = -0.0918978;
	cosin[754] = -0.0857861;
	cosin[755] = -0.0796712;
	cosin[756] = -0.0735533;
	cosin[757] = -0.0674327;
	cosin[758] = -0.0613095;
	cosin[759] = -0.055184;
	cosin[760] = -0.0490564;
	cosin[761] = -0.0429269;
	cosin[762] = -0.0367959;
	cosin[763] = -0.0306634;
	cosin[764] = -0.0245298;
	cosin[765] = -0.0183953;
	cosin[766] = -0.0122601;
	cosin[767] = -0.00612445;
	cosin[768] = 1.1456e-05;
	cosin[769] = 0.00614736;
	cosin[770] = 0.012283;
	cosin[771] = 0.0184182;
	cosin[772] = 0.0245528;
	cosin[773] = 0.0306863;
	cosin[774] = 0.0368188;
	cosin[775] = 0.0429498;
	cosin[776] = 0.0490793;
	cosin[777] = 0.0552068;
	cosin[778] = 0.0613323;
	cosin[779] = 0.0674555;
	cosin[780] = 0.0735762;
	cosin[781] = 0.0796941;
	cosin[782] = 0.085809;
	cosin[783] = 0.0919206;
	cosin[784] = 0.0980288;
	cosin[785] = 0.104133;
	cosin[786] = 0.110234;
	cosin[787] = 0.11633;
	cosin[788] = 0.122422;
	cosin[789] = 0.12851;
	cosin[790] = 0.134592;
	cosin[791] = 0.14067;
	cosin[792] = 0.146742;
	cosin[793] = 0.152809;
	cosin[794] = 0.15887;
	cosin[795] = 0.164925;
	cosin[796] = 0.170974;
	cosin[797] = 0.177016;
	cosin[798] = 0.183052;
	cosin[799] = 0.18908;
	cosin[800] = 0.195102;
	cosin[801] = 0.201116;
	cosin[802] = 0.207123;
	cosin[803] = 0.213122;
	cosin[804] = 0.219113;
	cosin[805] = 0.225096;
	cosin[806] = 0.23107;
	cosin[807] = 0.237035;
	cosin[808] = 0.242992;
	cosin[809] = 0.248939;
	cosin[810] = 0.254877;
	cosin[811] = 0.260806;
	cosin[812] = 0.266725;
	cosin[813] = 0.272633;
	cosin[814] = 0.278531;
	cosin[815] = 0.284419;
	cosin[816] = 0.290296;
	cosin[817] = 0.296163;
	cosin[818] = 0.302018;
	cosin[819] = 0.307861;
	cosin[820] = 0.313693;
	cosin[821] = 0.319514;
	cosin[822] = 0.325322;
	cosin[823] = 0.331118;
	cosin[824] = 0.336902;
	cosin[825] = 0.342672;
	cosin[826] = 0.34843;
	cosin[827] = 0.354175;
	cosin[828] = 0.359907;
	cosin[829] = 0.365625;
	cosin[830] = 0.371329;
	cosin[831] = 0.377019;
	cosin[832] = 0.382695;
	cosin[833] = 0.388357;
	cosin[834] = 0.394004;
	cosin[835] = 0.399636;
	cosin[836] = 0.405253;
	cosin[837] = 0.410855;
	cosin[838] = 0.416441;
	cosin[839] = 0.422012;
	cosin[840] = 0.427567;
	cosin[841] = 0.433105;
	cosin[842] = 0.438628;
	cosin[843] = 0.444134;
	cosin[844] = 0.449623;
	cosin[845] = 0.455095;
	cosin[846] = 0.46055;
	cosin[847] = 0.465988;
	cosin[848] = 0.471408;
	cosin[849] = 0.476811;
	cosin[850] = 0.482195;
	cosin[851] = 0.487561;
	cosin[852] = 0.492909;
	cosin[853] = 0.498239;
	cosin[854] = 0.50355;
	cosin[855] = 0.508841;
	cosin[856] = 0.514114;
	cosin[857] = 0.519367;
	cosin[858] = 0.524601;
	cosin[859] = 0.529815;
	cosin[860] = 0.535009;
	cosin[861] = 0.540182;
	cosin[862] = 0.545336;
	cosin[863] = 0.550469;
	cosin[864] = 0.555581;
	cosin[865] = 0.560672;
	cosin[866] = 0.565743;
	cosin[867] = 0.570792;
	cosin[868] = 0.575819;
	cosin[869] = 0.580825;
	cosin[870] = 0.585809;
	cosin[871] = 0.59077;
	cosin[872] = 0.59571;
	cosin[873] = 0.600627;
	cosin[874] = 0.605522;
	cosin[875] = 0.610393;
	cosin[876] = 0.615242;
	cosin[877] = 0.620068;
	cosin[878] = 0.62487;
	cosin[879] = 0.629649;
	cosin[880] = 0.634404;
	cosin[881] = 0.639135;
	cosin[882] = 0.643842;
	cosin[883] = 0.648525;
	cosin[884] = 0.653183;
	cosin[885] = 0.657817;
	cosin[886] = 0.662426;
	cosin[887] = 0.66701;
	cosin[888] = 0.671569;
	cosin[889] = 0.676103;
	cosin[890] = 0.680611;
	cosin[891] = 0.685094;
	cosin[892] = 0.68955;
	cosin[893] = 0.693981;
	cosin[894] = 0.698386;
	cosin[895] = 0.702764;
	cosin[896] = 0.707116;
	cosin[897] = 0.711442;
	cosin[898] = 0.71574;
	cosin[899] = 0.720012;
	cosin[900] = 0.724257;
	cosin[901] = 0.728474;
	cosin[902] = 0.732664;
	cosin[903] = 0.736826;
	cosin[904] = 0.74096;
	cosin[905] = 0.745067;
	cosin[906] = 0.749146;
	cosin[907] = 0.753196;
	cosin[908] = 0.757218;
	cosin[909] = 0.761211;
	cosin[910] = 0.765176;
	cosin[911] = 0.769112;
	cosin[912] = 0.773019;
	cosin[913] = 0.776897;
	cosin[914] = 0.780746;
	cosin[915] = 0.784565;
	cosin[916] = 0.788355;
	cosin[917] = 0.792115;
	cosin[918] = 0.795845;
	cosin[919] = 0.799546;
	cosin[920] = 0.803216;
	cosin[921] = 0.806856;
	cosin[922] = 0.810465;
	cosin[923] = 0.814045;
	cosin[924] = 0.817593;
	cosin[925] = 0.821111;
	cosin[926] = 0.824597;
	cosin[927] = 0.828053;
	cosin[928] = 0.831478;
	cosin[929] = 0.834871;
	cosin[930] = 0.838233;
	cosin[931] = 0.841563;
	cosin[932] = 0.844861;
	cosin[933] = 0.848128;
	cosin[934] = 0.851363;
	cosin[935] = 0.854565;
	cosin[936] = 0.857736;
	cosin[937] = 0.860874;
	cosin[938] = 0.86398;
	cosin[939] = 0.867053;
	cosin[940] = 0.870094;
	cosin[941] = 0.873102;
	cosin[942] = 0.876077;
	cosin[943] = 0.879019;
	cosin[944] = 0.881928;
	cosin[945] = 0.884804;
	cosin[946] = 0.887646;
	cosin[947] = 0.890455;
	cosin[948] = 0.893231;
	cosin[949] = 0.895973;
	cosin[950] = 0.898681;
	cosin[951] = 0.901355;
	cosin[952] = 0.903996;
	cosin[953] = 0.906602;
	cosin[954] = 0.909174;
	cosin[955] = 0.911712;
	cosin[956] = 0.914216;
	cosin[957] = 0.916685;
	cosin[958] = 0.91912;
	cosin[959] = 0.92152;
	cosin[960] = 0.923885;
	cosin[961] = 0.926216;
	cosin[962] = 0.928512;
	cosin[963] = 0.930772;
	cosin[964] = 0.932998;
	cosin[965] = 0.935189;
	cosin[966] = 0.937344;
	cosin[967] = 0.939464;
	cosin[968] = 0.941549;
	cosin[969] = 0.943598;
	cosin[970] = 0.945612;
	cosin[971] = 0.94759;
	cosin[972] = 0.949533;
	cosin[973] = 0.95144;
	cosin[974] = 0.953311;
	cosin[975] = 0.955146;
	cosin[976] = 0.956945;
	cosin[977] = 0.958708;
	cosin[978] = 0.960435;
	cosin[979] = 0.962126;
	cosin[980] = 0.96378;
	cosin[981] = 0.965398;
	cosin[982] = 0.96698;
	cosin[983] = 0.968526;
	cosin[984] = 0.970035;
	cosin[985] = 0.971507;
	cosin[986] = 0.972943;
	cosin[987] = 0.974343;
	cosin[988] = 0.975706;
	cosin[989] = 0.977031;
	cosin[990] = 0.978321;
	cosin[991] = 0.979573;
	cosin[992] = 0.980788;
	cosin[993] = 0.981967;
	cosin[994] = 0.983108;
	cosin[995] = 0.984213;
	cosin[996] = 0.98528;
	cosin[997] = 0.986311;
	cosin[998] = 0.987304;
	cosin[999] = 0.98826;
	cosin[1000] = 0.989179;
	cosin[1001] = 0.99006;
	cosin[1002] = 0.990905;
	cosin[1003] = 0.991712;
	cosin[1004] = 0.992481;
	cosin[1005] = 0.993214;
	cosin[1006] = 0.993909;
	cosin[1007] = 0.994566;
	cosin[1008] = 0.995186;
	cosin[1009] = 0.995769;
	cosin[1010] = 0.996314;
	cosin[1011] = 0.996822;
	cosin[1012] = 0.997292;
	cosin[1013] = 0.997724;
	cosin[1014] = 0.998119;
	cosin[1015] = 0.998476;
	cosin[1016] = 0.998796;
	cosin[1017] = 0.999078;
	cosin[1018] = 0.999323;
	cosin[1019] = 0.99953;
	cosin[1020] = 0.999699;
	cosin[1021] = 0.999831;
	cosin[1022] = 0.999925;
	cosin[1023] = 0.999981;

}
int whatsnext(int ix)
{
    int k1;
    k1 = ix / 127773;
    ix = 16807 * (ix - k1 * 127773) - k1 * 2836;
    if (ix < 0)
        ix += 2147483647;
    return ix;

}
int rand_LCG (int rnd_seed)
{

    int k1;
    int ix = rnd_seed;
    k1 = ix / 127773;
    ix = 16807 * (ix - k1 * 127773) - k1 * 2836;
    if (ix < 0)
        ix += 2147483647;
    return ix;
    //*rnd_seed = ix;
}

float rand_in0 (int* rnd_seed)
{
	//return 0.01;
	int ix = rand_LCG(*rnd_seed);
	//return (float)*rnd_seed/(MAX_LCF);
	return (float)ix/(MAX_LCF);
}

float rand_ex0 (int* rnd_seed)
{
	//return 0.01;
	//rand_LCG(rnd_seed);
	//float rand = 1.0 - ((float)*rnd_seed/(MAX_LCF));
	int ix = rand_LCG(*rnd_seed);
	//return (float)*rnd_seed/(MAX_LCF);
	float rand =  (float)ix/(MAX_LCF);
	if (rand == 0.0) rand+=0.01;
	return rand;
}

float acosSyn (float x)
{

	//float output = x;
	//float output = -0.54038583*x*x*x*x*x + -0.14191872*x*x*x*x + 0.07485317*x*x*x + 0.06303811*x*x + -1.02113558*x + 1.56817611;
	int index = floor((x + 1)*512.0);
	if (index == 1024) index = 1023;
	float output = arcos[index];
	return output;
}

// record reflectance
void RecordR(float refl, KernelStruct* kernel_info_p, PhotonStruct* Photon_Ptr)
{
	float x = Photon_Ptr->x;
	float y = Photon_Ptr->y;
	short  ir, ia;	// index

	ir = (short)(sqrt(x*x+y*y)*kernel_info_p->dr);
	if(ir>kernel_info_p->nr-1) ir=kernel_info_p->nr-1;

	ia = (short)(acosSyn(-Photon_Ptr->uz)/kernel_info_p->da);
	if(ia>kernel_info_p->na-1) ia=kernel_info_p->na-1;
	
	kernel_info_p->Rd_ra[ir][ia] += Photon_Ptr->w*(1.0-refl);

	Photon_Ptr->w *= refl;
}

// record transmittance
void RecordT(float trans, KernelStruct* kernel_info_p, PhotonStruct* Photon_Ptr)
{
	float x = Photon_Ptr->x;
	float y = Photon_Ptr->y;
	short  ir, ia; // index

	ir = (short)(sqrt(x*x+y*y)*kernel_info_p->dr);
	if(ir>kernel_info_p->nr-1) ir=kernel_info_p->nr-1;

	ia = (short)(acosSyn(-Photon_Ptr->uz)/kernel_info_p->da);
	if(ia>kernel_info_p->na-1) ia=kernel_info_p->na-1;

	kernel_info_p->Tt_ra[ir][ia] += Photon_Ptr->w*(1.0-trans);


	/*ir = (short)(sqrt(x*x+y*y)*kernel_info_p->dr);
	//ir = (short)(sqrt(x*x+y*y)*100);
	ia = (short)(acosSyn(Photon_Ptr->uz)/kernel_info_p->da);
	//ia = (short)(acosSyn(Photon_Ptr->uz)/0.5*PI);
	if(ir<=kernel_info_p->nr-1 && ia<=kernel_info_p->na-1) kernel_info_p->Tt_ra[ir][ia] += Photon_Ptr->w*(1.0-trans);
	//if(ir<=49 && 0) kernel_info_p->Tt_ra[ir][ia] += Photon_Ptr->w*(1.0-trans);

	*/
	Photon_Ptr->w *= trans;
}

float rFresnel(float n1, float n2, float ca1, float* ca2_Ptr)
{
	float r;
  
	if(n1==n2) { // matched boundary
	*ca2_Ptr = ca1;
	r = 0.0;
	}
	else if(ca1>COSZERO) { // normal incident
	*ca2_Ptr = ca1;
	r = (n2-n1)/(n2+n1);
	r *= r;
	}
	else if(ca1<COS90D)  { // very slant
	*ca2_Ptr = 0.0;
	r = 1.0;
	}
	else  { // general
	float sa1, sa2;
	float ca2;
    
	sa1 = sqrt(1-ca1*ca1);
	sa2 = n1*sa1/n2;

	if(sa2>=1.0) {
	*ca2_Ptr = 0.0;
	r = 1.0;
	}
	else  {
	float cap, cam;
	float sap, sam;
      
	*ca2_Ptr = ca2 = sqrt(1-sa2*sa2);
      
	cap = ca1*ca2 - sa1*sa2;
	cam = ca1*ca2 + sa1*sa2;
	sap = sa1*ca2 + ca1*sa2;
	sam = sa1*ca2 - ca1*sa2;
	r = 0.5*sam*sam*(cam*cam+cap*cap)/(sap*sap*cam*cam);
	}
	}
	return r;
}

void crossUp(KernelStruct* kernel_info_p, PhotonStruct* Photon_Ptr, int* rnd_seed)
{
#pragma HLS INLINE

	float uz = Photon_Ptr->uz; // z directional cosine
	float uz1; // cosines of transmission alpha; always positive
	float r = 0.0; // reflectance
	short layer = Photon_Ptr->layer;
	float ni = kernel_info_p->layerspecs[layer].n;
	float nt = kernel_info_p->layerspecs[layer-1].n;
  
	// get reflectance
	if(-uz <= kernel_info_p->layerspecs[layer].cos_crit0) // total internal reflection
	r=1.0;
	else r = rFresnel(ni, nt, -uz, &uz1);
	
#if PARTIALREFLECTION
	if(layer == 1 && r<1.0) { // partially transmitted
	Photon_Ptr->uz = -uz1; // transmitted photon
	RecordR(r, In_Ptr, Photon_Ptr);
	Photon_Ptr->uz = -uz; // reflected photon
	}
	else if(rand_in0 (rnd_seed) > r) { // transmitted to layer-1

	Photon_Ptr->layer--;
	Photon_Ptr->ux *= ni/nt;
	Photon_Ptr->uy *= ni/nt;
	Photon_Ptr->uz = -uz1;
	}
	else // reflected
	Photon_Ptr->uz = -uz;
	*rnd_seed = whatsnext(*rnd_seed);
#else
	if(rand_in0 (rnd_seed) > r) { // transmitted to layer-1
	if(layer==1)  {
	Photon_Ptr->uz = -uz1;
	RecordR(0.0, kernel_info_p, Photon_Ptr);
	Photon_Ptr->w = 0.0;
	}
	else {
	Photon_Ptr->layer--;
	Photon_Ptr->ux *= ni/nt;
	Photon_Ptr->uy *= ni/nt;
	Photon_Ptr->uz = -uz1;
	}
	}
	else // reflected
	Photon_Ptr->uz = -uz;
	*rnd_seed = whatsnext(*rnd_seed);
#endif
}

void crossDown(KernelStruct* kernel_info_p, PhotonStruct* Photon_Ptr, int* rnd_seed)
{
#pragma HLS INLINE

	float uz = Photon_Ptr->uz; // z directional cosine
	float uz1; // cosines of transmission alpha
	float r = 0.0; // reflectance
	short layer = Photon_Ptr->layer;
	float ni = kernel_info_p->layerspecs[layer].n;
	float nt = kernel_info_p->layerspecs[layer+1].n;
	
	// get reflection
	if(uz <= kernel_info_p->layerspecs[layer].cos_crit1) // total internal reflection
	r = 1.0;
	else r = rFresnel(ni, nt, uz, &uz1); 
  
#if PARTIALREFLECTION	
	if(layer == In_Ptr->num_layers && r < 1.0) {
	Photon_Ptr->uz = uz1;
	RecordT(r, In_Ptr, Photon_Ptr);
	Photon_Ptr->uz = -uz;
	}
	else if(rand_in0 (rnd_seed) > r) { // transmitted to layer+1
	Photon_Ptr->layer++;
	Photon_Ptr->ux *= ni/nt;
	Photon_Ptr->uy *= ni/nt;
	Photon_Ptr->uz = uz1;
	}
	else // reflected
	Photon_Ptr->uz = -uz;
	*rnd_seed = whatsnext(*rnd_seed);
#else
	if(rand_in0 (rnd_seed) > r) { // transmitted to layer+1
	if(layer == kernel_info_p->num_layers) {
	Photon_Ptr->uz = uz1;
	RecordT(0.0, kernel_info_p, Photon_Ptr);
	Photon_Ptr->w = 0.0;
	}
	else {
	Photon_Ptr->layer++;
	Photon_Ptr->ux *= ni/nt;
	Photon_Ptr->uy *= ni/nt;
	Photon_Ptr->uz = uz1;
	}
	}
	else // reflected
	Photon_Ptr->uz = -uz;
	*rnd_seed = whatsnext(*rnd_seed);
#endif
}

float rspecular(LayerStruct* Layerspecs_Ptr)
{

	float r1, r2;
	float temp; // direct reflections from the 1st and 2nd layers

	
	temp =(Layerspecs_Ptr[0].n - Layerspecs_Ptr[1].n)
	   /(Layerspecs_Ptr[0].n + Layerspecs_Ptr[1].n);
	r1 = temp*temp;
	
	if((Layerspecs_Ptr[1].mua == 0.0) 
	&& (Layerspecs_Ptr[1].mus == 0.0))  { // glass layer
	temp = (Layerspecs_Ptr[1].n - Layerspecs_Ptr[2].n)
	/(Layerspecs_Ptr[1].n + Layerspecs_Ptr[2].n);
	r2 = temp*temp;
	r1 = r1 + (1-r1)*(1-r1)*r2/(1-r1*r2);
	}
	return r1;	
}

void hopGlass (KernelStruct* kernel_info_p, PhotonStruct* Photon_Ptr, int* rnd_seed)
{
#pragma HLS INLINE

	float step;
	float uz = Photon_Ptr->uz;
	short layer = Photon_Ptr->layer;
	
	if(uz == 0.0) {
	Photon_Ptr->w = 0.0;
	} else {
	if(uz > 0.0) step = (kernel_info_p->layerspecs[layer].z1 - Photon_Ptr->z)/uz;
	else if(uz < 0.0) step = (kernel_info_p->layerspecs[layer].z0 - Photon_Ptr->z)/uz;
	else step = 0.0;

	Photon_Ptr->x += step*Photon_Ptr->ux;
	Photon_Ptr->y += step*Photon_Ptr->uy;
	Photon_Ptr->z += step*Photon_Ptr->uz;

	if (uz < 0.0) {
	crossUp(kernel_info_p, Photon_Ptr, rnd_seed);
	} else {
	crossDown(kernel_info_p, Photon_Ptr, rnd_seed);
	}

	}
}

void launch(LayerStruct* Layerspecs_Ptr, PhotonStruct* Photon_Ptr)
{

	//float rspec = rspecular(Layerspecs_Ptr);
	//printf("%f \n", rspec);
	float rspec = 0.024373;


	Photon_Ptr->w = 1.0 - rspec;	
	Photon_Ptr->layer = 1;
	Photon_Ptr->sleft = 0;
	
	Photon_Ptr->x = 0.0;	
	Photon_Ptr->y = 0.0;	
	Photon_Ptr->z = 0.0;	
	Photon_Ptr->ux = 0.0;	
	Photon_Ptr->uy = 0.0;	
	Photon_Ptr->uz = 1.0;	
	
	if((Layerspecs_Ptr[1].mua == 0.0) && (Layerspecs_Ptr[1].mus == 0.0)) { // glass layer
	Photon_Ptr->layer = 2;
	Photon_Ptr->z = Layerspecs_Ptr[2].z0;
	}



}

void roulette(PhotonStruct* Photon_Ptr, int* rnd_seed)
{

	if (rand_in0 (rnd_seed) < CHANCE) Photon_Ptr->w *= 10;
	else Photon_Ptr->w = 0.0;
	*rnd_seed = whatsnext(*rnd_seed);

}

void drop(KernelStruct* kernel_info_p, PhotonStruct* Photon_Ptr)
{
#pragma HLS INLINE

	float dwa; // weight drop
	float x = Photon_Ptr->x;
	float y = Photon_Ptr->y;
	short  iz, ir; // index
	short  layer = Photon_Ptr->layer;
	float mua, mus;

	// array indices
	iz = (short)(Photon_Ptr->z*kernel_info_p->dz);
	if(iz>kernel_info_p->nz-1) iz=kernel_info_p->nz-1;

	ir = (short)(sqrt(x*x+y*y)*kernel_info_p->dr);
	if(ir>kernel_info_p->nr-1) ir=kernel_info_p->nr-1;

	// update weight
	mua = kernel_info_p->layerspecs[layer].mua;
	mus = kernel_info_p->layerspecs[layer].mus;
	dwa = Photon_Ptr->w * mua/(mua+mus);
	Photon_Ptr->w -= dwa;

	/* assign dwa to the absorption array element. */
	kernel_info_p->A_rz[ir][iz] += dwa;

}

void spin(float g, PhotonStruct* photon_p, int* rnd_seed)
{
#pragma HLS INLINE

	float cost, sint; // cos and sin of theta
	float cosp, sinp; // cos and sin of psi

	float ux = photon_p->ux;
	float uy = photon_p->uy;
	float uz = photon_p->uz;

	float psi;

	if (g == 0.0) {
	cost = 2*rand_in0 (rnd_seed)-1;

	} else {
	float temp = (1-g*g)/(1-g+2*g*rand_in0 (rnd_seed));
	cost = (1+g*g - temp*temp)/(2*g);
	if(cost < -1) cost = -1;
	else if(cost > 1) cost = 1;
	}
	*rnd_seed = whatsnext(*rnd_seed);

	sint = sqrt(1.0 - cost*cost);

	psi = 2.0*PI*rand_in0 (rnd_seed);
	*rnd_seed = whatsnext(*rnd_seed);
	int indexcos =(int)floor(psi*162.974664);
	if (indexcos == 1024) indexcos = 1023;
	cosp = cosin[indexcos];
	//cosp = cos(psi);

	if(psi<PI)
	sinp = sqrt(1.0 - cosp*cosp);
	else
	sinp = -sqrt(1.0 - cosp*cosp);

	if(fabs(uz) > COSZERO)  {
	photon_p->ux = sint*cosp;
	photon_p->uy = sint*sinp;
	photon_p->uz = cost*SIGN(uz);;
	}
	else  {
	float temp = sqrt(1.0 - uz*uz);
	photon_p->ux = sint*(ux*uz*cosp - uy*sinp)
	/temp + ux*cost;
	photon_p->uy = sint*(uy*uz*cosp + ux*sinp)
	/temp + uy*cost;
	photon_p->uz = -sint*cosp*temp + uz*cost;
	}
	

}

void hopTissue (KernelStruct* kernel_info_p, PhotonStruct* Photon_Ptr, int* rnd_seed)
{
#pragma HLS INLINE

	short layer = Photon_Ptr->layer;
	float uz = Photon_Ptr->uz;
	float mua = kernel_info_p->layerspecs[layer].mua;
	float mus = kernel_info_p->layerspecs[layer].mus;
	float step;
	float distance_to_boundary;

	float mut = mua+mus;

	// determine step size
	if(Photon_Ptr->sleft == 0.0) { // new step
	step = -log(rand_ex0 (rnd_seed))/mut;
	*rnd_seed = whatsnext(*rnd_seed);
	} else { // some step left
	step = Photon_Ptr->sleft/mut;
	Photon_Ptr->sleft = 0.0;
	}

	// determine distance to boundary
	if (uz > 0.0) distance_to_boundary = (kernel_info_p->layerspecs[layer].z1 - Photon_Ptr->z)/uz; // upward
	else if (uz < 0.0) distance_to_boundary = (kernel_info_p->layerspecs[layer].z0 - Photon_Ptr->z)/uz; // downward

	// hits boundary

	if (uz != 0.0 && step > distance_to_boundary) {
	Photon_Ptr->sleft = (step - distance_to_boundary)*mut;
	step = distance_to_boundary;

	Photon_Ptr->x += step*Photon_Ptr->ux;
	Photon_Ptr->y += step*Photon_Ptr->uy;
	Photon_Ptr->z += step*Photon_Ptr->uz;

	if (uz < 0.0) {
	crossUp(kernel_info_p, Photon_Ptr, rnd_seed);
	} else {
	crossDown(kernel_info_p, Photon_Ptr, rnd_seed);
	}
	} else {
	Photon_Ptr->x += step*Photon_Ptr->ux;
	Photon_Ptr->y += step*Photon_Ptr->uy;
	Photon_Ptr->z += step*Photon_Ptr->uz;

	drop(kernel_info_p, Photon_Ptr);
	spin(kernel_info_p->layerspecs[layer].g, Photon_Ptr, rnd_seed);
	}

}




void mcml(KernelStruct* kernel_info_p)
{
#pragma HLS INTERFACE s_axilite port=return bundle=CTRL_REG

#pragma HLS INTERFACE m_axi port=kernel_info_p->Tt_ra offset=off
#pragma HLS INTERFACE m_axi port=kernel_info_p->A_rz offset=off
#pragma HLS INTERFACE m_axi port=kernel_info_p->Rd_ra offset=off
#pragma HLS INTERFACE bram port=kernel_info_p->layerspecs
#pragma HLS RESOURCE variable=kernel_info_p->layerspecs core=RAM_1P_BRAM
#pragma HLS INTERFACE s_axilite port=kernel_info_p->num_layers bundle=CTRL_REG
#pragma HLS INTERFACE s_axilite port=kernel_info_p->na bundle=CTRL_REG
#pragma HLS INTERFACE s_axilite port=kernel_info_p->nr bundle=CTRL_REG
#pragma HLS INTERFACE s_axilite port=kernel_info_p->nz bundle=CTRL_REG
#pragma HLS INTERFACE s_axilite port=kernel_info_p->da bundle=CTRL_REG
#pragma HLS INTERFACE s_axilite port=kernel_info_p->dr bundle=CTRL_REG
#pragma HLS INTERFACE s_axilite port=kernel_info_p->dz bundle=CTRL_REG
#pragma HLS INTERFACE s_axilite port=kernel_info_p->num_photons bundle=CTRL_REG

	init_arccos();
	init_cosign();
	//PhotonStruct photon[10];.


	KernelStruct kernel_info_0 = *kernel_info_p;/*
	KernelStruct kernel_info_1 = *kernel_info_p;

	KernelStruct kernel_info_2 = *kernel_info_p;
	KernelStruct kernel_info_3 = *kernel_info_p;
	KernelStruct kernel_info_4 = *kernel_info_p;
	KernelStruct kernel_info_5 = *kernel_info_p;
	KernelStruct kernel_info_6 = *kernel_info_p;
	KernelStruct kernel_info_7 = *kernel_info_p;
	KernelStruct kernel_info_8 = *kernel_info_p;
	KernelStruct kernel_info_9 = *kernel_info_p;
*/
	PhotonStruct photon_0[1000];
	/*
	PhotonStruct photon_1;

	PhotonStruct photon_2;
	PhotonStruct photon_3;
	PhotonStruct photon_4;
	PhotonStruct photon_5;
	PhotonStruct photon_6;
	PhotonStruct photon_7;
	PhotonStruct photon_8;
	PhotonStruct photon_9;
*/
	//PhotonStruct photon_0;
	//int real = 1;
	//int *rnd_seed = &real;
	int rnd_seed_0[1000];// = 1;
	for (int j=0;j<1000;j++)
	rnd_seed_0[j] = j+1;
	//int rnd_seed_0 = 11;
	/*
	int rnd_seed_1 = 11;

	int rnd_seed_2 = 2;
	int rnd_seed_3 = 2;
	int rnd_seed_4 = 3;
	int rnd_seed_5 = 4;
	int rnd_seed_6 = 5;
	int rnd_seed_7 = 6;
	int rnd_seed_8 = 7;
	int rnd_seed_9 = 8;
*/
	int numterminatedphotons = 0;

	/*
	launch (kernel_info_p->layerspecs, photon);
	launch (kernel_info_p->layerspecs, photon + 1);

	launch (kernel_info_p->layerspecs, photon + 2);
	launch (kernel_info_p->layerspecs, photon + 3);
	launch (kernel_info_p->layerspecs, photon + 4 );
	launch (kernel_info_p->layerspecs, photon + 5);
	launch (kernel_info_p->layerspecs, photon + 6);
	launch (kernel_info_p->layerspecs, photon + 7);
	launch (kernel_info_p->layerspecs, photon + 8);
	launch (kernel_info_p->layerspecs, photon + 9);
*/
	for (int i =0; i<1000;i++)
	launch(kernel_info_0.layerspecs, &photon_0[i]);
	//launch(kernel_info_0.layerspecs, &photon_0);
	/*
	launch(kernel_info_1.layerspecs, &photon_1);

	launch(kernel_info_2.layerspecs, &photon_2);
	launch(kernel_info_3.layerspecs, &photon_3);
	launch(kernel_info_4.layerspecs, &photon_4);
	launch(kernel_info_5.layerspecs, &photon_5);
	launch(kernel_info_6.layerspecs, &photon_6);
	launch(kernel_info_7.layerspecs, &photon_7);
	launch(kernel_info_8.layerspecs, &photon_8);
	launch(kernel_info_9.layerspecs, &photon_9);
	/*
*/

PHOTON_WHILE: while (numterminatedphotons < kernel_info_p->num_photons) {

	mcml_label0:for (int pipe = 0; pipe <1000 ;pipe++)
	{
	#pragma HLS PIPELINE

	/*
	*/
	if ((kernel_info_0.layerspecs[photon_0[pipe].layer].mua == 0.0)
	&& (kernel_info_0.layerspecs[photon_0[pipe].layer].mus == 0.0)) {
	printf("glass layer");
	hopGlass(&kernel_info_0, &photon_0[pipe], &rnd_seed_0[pipe]);
	}
	else {
	//hopTissue(&kernel_info_0, &photon_0[pipe], &rnd_seed_0[pipe]);
	hopTissue(&kernel_info_0, &photon_0[pipe], &rnd_seed_0[pipe]);
	}


	//if (photon_0[pipe].w < WEIGHT)
	//roulette(&photon_0[pipe], &rnd_seed_0[pipe]);
	if (photon_0[pipe].w < WEIGHT)
	roulette(&photon_0[pipe], &rnd_seed_0[pipe]);

	//if (photon_0[pipe].w  == 0.0)
	if (photon_0[pipe].w  == 0.0)
	{
	numterminatedphotons++;
	//if (numterminatedphotons > kernel_info_p->num_photons) break;
	//launch(kernel_info_0.layerspecs, &photon_0[pipe]);
	launch(kernel_info_0.layerspecs, &photon_0[pipe]);
	}


	}
}
	*kernel_info_p = kernel_info_0;
	//printf("%d %d \n", g_0, g_1);
}
